#!/usr/bin/env bash
# Invoke with `source "$BUILDPACK_DIR/bin/install-chrome-dependencies"` from inside `bin/compile`.
# This script is mostly copied from:
#  https://github.com/heroku/heroku-buildpack-google-chrome/blob/master/bin/compile

# Uses variables & methods from compile script:
# BUILD_DIR
# CACHE_DIR
# ENV_DIR
# BUILDPACK_DIR
# topic()
# indent()

topic "Installing Chrome dependencies"

# Install correct dependencies according to $STACK
case "${STACK}" in
  "heroku-18" | "heroku-20" | "heroku-22")
    # the package list is found by using ci:debug then running ldd $GOOGLE_CHROME_BIN | grep not
    # also look here for more packages/notes https://developers.google.com/web/tools/puppeteer/troubleshooting
    PACKAGES="
      gconf-service
      libappindicator1
      libasound2
      libatk1.0-0
      libatk-bridge2.0-0
      libcairo-gobject2
      libdrm2
      libgbm1
      libgconf-2-4
      libgtk-3-0
      libnspr4
      libnss3
      libx11-xcb1
      libxcb-dri3-0
      libxcomposite1
      libxcursor1
      libxdamage1
      libxfixes3
      libxi6
      libxinerama1
      libxrandr2
      libxshmfence1
      libxss1
      libxtst6
      fonts-liberation
    "
    ;;
  *)
    error "STACK must be 'heroku-18', 'heroku-20' or 'heroku-22', not '${STACK}'."
esac

if [ ! -f $CACHE_DIR/PURGED_CACHE_V1 ]; then
  echo "Purging cache" | indent
  rm -rf $CACHE_DIR/apt
  rm -rf $CACHE_DIR/archives
  rm -rf $CACHE_DIR/lists
  touch $CACHE_DIR/PURGED_CACHE_V1
fi

# This is where the original buildpack installed Chrome itself, 
# but Chrome for Testing is installed from direct downloads.
#
# echo "Installing Google Chrome from the $channel channel." | indent
# PACKAGES="$PACKAGES https://dl.google.com/linux/direct/google-chrome-${channel}_current_amd64.deb"

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

echo "Updating apt caches" | indent
apt-get $APT_OPTIONS update | indent

for PACKAGE in $PACKAGES; do
  if [[ $PACKAGE == *deb ]]; then
    PACKAGE_NAME=$(basename $PACKAGE .deb)
    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

    echo "Fetching $PACKAGE" | indent
    curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
  else
    echo "Fetching .debs for $PACKAGE" | indent
    apt-get $APT_OPTIONS -y --force-yes -d install --reinstall $PACKAGE | indent
  fi
done

mkdir -p $BUILD_DIR/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  echo "Installing $(basename $DEB)" | indent
  dpkg -x $DEB $BUILD_DIR/.apt/
done

echo "Writing profile script" | indent
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$HOME/.apt/usr/include/x86_64-linux-gnu:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

export PATH="$BUILD_DIR/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$BUILD_DIR/.apt/usr/include/x86_64-linux-gnu:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

#give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$BUILDPACK_DIR/export"

echo "Rewrite package-config files" | indent
find $BUILD_DIR/.apt -type f -ipath '*/pkgconfig/*.pc' | xargs --no-run-if-empty -n 1 sed -i -e 's!^prefix=\(.*\)$!prefix='"$BUILD_DIR"'/.apt\1!g'

echo "Installed Chrome dependencies for $STACK" | indent
